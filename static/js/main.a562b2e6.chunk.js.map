{"version":3,"sources":["components/Navbar/Navbar.js","components/Searchbar/Searchbar.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Searchbar","props","class","htmlFor","onChange","handleSearch","id","value","searchString","handleFilter","selected","name","onClick","handleButtonClick","Card","first_name","last_name","department","title","App","state","employees","data","map","employee","filter","event","setState","target","toLowerCase","data2","preventDefault","match","this","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a562b2e6.chunk.js","sourcesContent":["import React from 'react'\nimport './Navbar.css'\n\nconst Navbar = () => {\n  return (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"#\">Employee Directory</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n  </nav>\n  )\n}\n\n\nexport default Navbar","import React from 'react'\nimport './Searchbar.css'\nconst Searchbar = props => {\n  return (\n  <form>\n    <div className=\"form-group row\">\n      <div class=\"input-group-prepend\">\n        <label htmlFor=\"search\" className=\"col-sm-2 col-form-label\">Search</label>\n      </div>\n      <div className=\"col-sm-10\">\n      <input onChange = {props.handleSearch}type=\"text\" className=\"form-control\" id=\"search\" value={props.searchString}/>\n    </div>\n    </div>\n      <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n          <label class=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Filter By</label>\n        </div>\n        <select onChange = {props.handleFilter}class=\"custom-select\" id=\"inputGroupSelect01\">\n          <option selected>Choose...</option>\n          <option value=\"department\" name = \"department\">Department</option>\n          <option value=\"title\" name = \"title\">Title</option>\n        </select>\n      </div>\n      <button onClick = {props.handleButtonClick} className=\"btn btn-primary\">Search</button>\n  </form>\n  )\n}\n\nexport default Searchbar","import React from 'react'\nimport './Card.css'\nconst Card = props => {\n  return(\n    <div className=\"card col-md-3\">\n      <div className=\"card-body\">\n      <h5 className=\"card-title\">{props.first_name} {props.last_name}</h5>\n        <hr></hr>\n      <p className=\"card-text\">Department: {props.department}</p>\n      <p className=\"card-text\">Title: {props.title}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React, {Component} from 'react'\nimport Navbar from './components/Navbar'\nimport Searchbar from './components/Searchbar'\nimport Card from './components/Card'\nimport data from '../src/components/data/data.json'\nclass App extends Component {\n\n  state = {\n    employees: data.map(employee => {\n      return <Card\n        first_name={employee.first_name}\n        last_name={employee.last_name}\n        department={employee.department}\n        title={employee.title}\n      />\n    }),\n    filter: '',\n    searchString: '',\n  }\n\n  handleFilter = event => {\n    this.setState({filter: event.target.value.toLowerCase()})\n  }\n\n  handleSearch = event => {\n    this.setState({searchString: event.target.value.toLowerCase()})\n  }\n\n  handleButtonClick = event => {\n    event.preventDefault()\n    let data2\n    switch(this.state.filter){\n      case 'department':\n        //filter for only department matching what the searchString is\n        data2 = data.filter( employee => {\n          return employee.department.toLowerCase().match(this.state.searchString)\n        })\n        //taking the filter data and mapping it into a Card component\n        this.setState({\n          filter: '',\n          searchString: '',\n          employees: data2.map(employee => {\n          return <Card\n            first_name={employee.first_name}\n            last_name={employee.last_name}\n            department={employee.department}\n            title={employee.title}\n          />\n          })\n        })\n        break\n      case 'title':\n        //filter for only title matching what the searchString is\n        data2 = data.filter(employee => {\n          return employee.title.toLowerCase().match(this.state.searchString)\n        })\n        //taking the filter data and mapping it into a Card component\n        this.setState({\n          filter: '',\n          searchString: '',\n          employees: data2.map(employee => {\n            return <Card\n              first_name={employee.first_name}\n              last_name={employee.last_name}\n              department={employee.department}\n              title={employee.title}\n            />\n          })\n        })\n        break\n      }\n  }\n\n  render(){\n    return (\n      <>\n        <Navbar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Searchbar \n              filter = {this.state.filter}\n              searchString = {this.state.searchString}\n              handleFilter = {this.handleFilter}\n              handleSearch = {this.handleSearch}\n              handleButtonClick = {this.handleButtonClick}\n              />\n            </div>\n            <div className=\"col-12\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  {/* cards go here */}\n                  {this.state.employees}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}